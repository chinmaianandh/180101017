#include<bits/stdc++.h>
using namespace std;

int length_check(string A){
    int count=0;
    for(int i=0;i<A.length(); i++)
    {
        if(A[i]=='|')
        count++;
    }
    return count;
}

// function to check if paranthesis are balanced
bool is_balanced(string A)
{
	stack<char> s;
	char x;
	int count=length_check(A);
	if(count%2==1)
	return false;
	int t=0;

	// Traversing the expression
	for (int i=0; i<A.length(); i++)
	{
	    if(A[i]=='|'){
	        t++;
	    }
		if (A[i]=='('||A[i]=='['||A[i]=='{'||A[i]=='<'||(A[i]=='|'&&t<=count/2))
		{
			// Push the element in the stack
			s.push(A[i]);
			continue;
		}

		// IF current current character is not opening
		// bracket, then it must be closing. So stack
		// cannot be empty at this point.
		if (s.empty())
		return false;

		switch (A[i])
		{
		case ')':

			// Store the top element in a
			x = s.top();
			s.pop();
			if (x=='{' || x=='['||x=='|'||x=='<')
				return false;
			break;

		case '}':
// Store the top element in b
			x = s.top();
			s.pop();
			if (x=='(' || x=='['||x=='|'||x=='<')
				return false;
			break;

		case ']':

			// Store the top element in c
			x = s.top();
			s.pop();
			if (x =='(' || x == '{'||x=='|'||x=='<')
				return false;
				break;


	    	case '>':

			// Store the top element in b
			x = s.top();
			s.pop();
			if (x=='(' || x=='['||x == '{'||x=='|')
				return false;
			break;
				case '|':

			// Store the top element in b
			x = s.top();
			s.pop();
			if (x=='(' || x=='['||x == '{'||x=='<')
				return false;
			break;

		}
	}

	// Check Empty Stack
	return (s.empty());
}

// Driver program to test above function
int main()
{
	int t;
	cin>>t;
	string A[t];
	for(int j=0;j<t;j++)
	{
	    cin>>A[j];
	}
	for(int i=0;i<t;i++)
{
	if (is_balanced(A[i]))
		cout << "YES"<<endl;
	else
		cout << "NO"<<endl;
}
	return 0;
} 
